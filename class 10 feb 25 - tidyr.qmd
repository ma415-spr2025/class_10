---
title: "Reshaping Data with Tidyr"
format: 
  html:
    embed-resources: true
editor: visual
---

Reshaping Data

[TidyR website](https://tidyr.tidyverse.org/)

[TidyR CRAN package site](https://cran.r-project.org/web/packages/tidyr/index.html)

[Cheatsheet](https://rstudio.github.io/cheatsheets/tidyr.pdf)

# Pivoting

## pivot_longer()

```{r}
#| label: seetup
#| echo: false
#| warning: false
#| message: false

library(tidyr)
library(dplyr)
library(readr)



```

### Religion

Example from last class:

```{r}
relig_income

```

This dataset contains **three variables**:

-   **religion**, stored in the rows,
-   **income** spread across the column names, and
-   **count** stored in the cell values.

#### Use pivot_longer():

-   The first argument is the dataset to reshape, relig_income.

-   cols describes which columns need to be reshaped. In this case, it’s every column apart from religion.

-   names_to gives the name of the variable that will be created from the data stored in the column names, i.e. income.

-   values_to gives the name of the variable that will be created from the data stored in the cell value, i.e. count.

-   Neither the names_to nor the values_to column exists in relig_income, so we provide them as strings surrounded by quotes.

```{r}
#| label: religion example
#| echo: true

relig_income %>% 
  pivot_longer(
    cols = !religion, 
    names_to = "income", 
    values_to = "count"
  )

```

### Billboard: Numeric data in column names

```{r}
#| label: billboard

billboard

```

-   The names become a variable called week

-   The values to become a variable called rank

-   Use values_drop_na to drop rows with missing values which are created with a song drops off the charts in less than 76 weeks.

```{r}
#| label: billboard pivot 1

billboard %>% 
  pivot_longer(
    cols = starts_with("wk"), 
    names_to = "week", 
    values_to = "rank",
    values_drop_na = TRUE
  )

```

Improved

-   Show how long each song stayed in the charts by converting the week variable to an integer
    -   use names_prefix to strips off the wk prefix,
    -   use names_transform to convert week into an integer

```{r}
billboard %>% 
  pivot_longer(
    cols = starts_with("wk"), 
    names_to = "week", 
    names_prefix = "wk",
    names_transform = as.integer,
    values_to = "rank",
    values_drop_na = TRUE,
  )

```

### WHO

```{r}
#| label: WHO

who


```

-   country, iso2, iso3, and year are already variables. They can be left as is.
-   But the columns from new_sp_m014 to newrel_f65 encode four variables in their names.

```{r}
#| label: WHO 1

who %>% 
  pivot_longer(
    cols = new_sp_m014:newrel_f65,
    names_to = c("diagnosis", "gender", "age"), 
    names_pattern = "new_?(.*)_(.)(.*)",
    values_to = "count"
  )

```

### Household: Multiple observations per row

The name of the column that belongs in the output is part of the column name in the input.

```{r}
#| label: household

household

```

-   There are two values for each child: name and dob (date of birth).
-   These need to go into separate columns
-   Again: multiple variables to names_to
    -   use names_sep to split up each variable name
    -   Note the special name .value: this tells pivot_longer() that that part of the column name specifies the “value” being measured

```{r}
#| label: household 1

household %>% 
  pivot_longer(
    cols = !family, 
    names_to = c(".value", "child"), 
    names_sep = "_", 
    values_drop_na = TRUE
  )
  
  

```

## pivot_wider()

Makes a dataset wider by increasing the number of columns and decreasing the number of rows.

It’s relatively rare to need pivot_wider() to make tidy data, but it’s often useful for creating summary tables for presentation, or data in a format needed by other tools.

### Capture-recapture data

The fish_encounters dataset, contributed by Myfanwy Johnston, describes when fish swimming down a river are detected by automatic monitoring stations:

```{r}
#| label: wider - fish

fish_encounters


```

To analyse this data, make each station a column.

```{r}
#| label: fish - columns

fish_encounters %>% 
  pivot_wider(
    names_from = station, 
    values_from = seen
  )

```

### Tidy census

The us_rent_income dataset contains information about median income and rent for each state in the US for 2017 (from the American Community Survey, retrieved with the tidycensus package).

```{r}
#| label: tidy census

us_rent_income

```

Here both estimate and moe are values columns, so we can supply them to values_from:

```{r}
#| label: census wider 

us_rent_income %>% 
  pivot_wider(
    names_from = variable, 
    values_from = c(estimate, moe)
  )

```

## Longer, then wider

For some problems, combining pivot_longer() and pivot_wider() is required.

### World bank

world_bank_pop contains data from the World Bank about population per country from 2000 to 2018.

```{r}
#| label: world bank 

world_bank_pop

```

Start with the most obvious problem: year is spread across multiple columns.

```{r}
#| label: world bank year across multiple columns

pop2 <- world_bank_pop %>% 
  pivot_longer(
    cols = `2000`:`2017`, 
    names_to = "year", 
    values_to = "value"
  )
pop2



```

Now, consider the indicator variable:

```{r}
#| label: WB indicator

pop2 %>% 
  count(indicator)


```

Consider the sense of the data. - SP.POP.GROW is population growth, - SP.POP.TOTL is total population, - and SP.URB.\* are the same but only for urban areas.

Split this up into two variables: - area (total or urban) - population or growth)

```{r}
#| label: WB 3

pop3 <- pop2 %>% 
  separate(indicator, c(NA, "area", "variable"))

pop3


```

Now, pivot(wider)

```{r}
#| label: WB pivot wider

pop3 %>% 
  pivot_wider(
    names_from = variable, 
    values_from = value
  )


```
